<idea-plugin>
  <id>artsiomch.cmake.plus</id>
  <name>CMake Plus</name>
  <version>GRADLE.BUILD</version>
  <vendor>achapialiou</vendor>

  <product-descriptor code="PCMAKEPLUS" release-date="20190810" release-version="1921"/>

  <description><![CDATA[
     Extend CMake language support in the IDE's Editor:<br>
     - Variables navigation (Go to definition / Find usages) and renaming(*see Notes). <br>
     - User variables definition/reference completion added (no scopes, very little semantic checks yet). <br>
     - Folding regions for functions, macros, if/for/while blocks and: <br>
          &emsp; * Multiline brackets comments; <br>
          &emsp; * Consequent single-line comments;  <br>
          &emsp; * Multiline function's arguments. <br>
     - "Comment with Line / Block Comment" (`Ctrl + /` and `Shift + Ctrl + /`) actions added. <br>
     - Structure View (for the current file) with:  <br>
          &emsp; * Function/Macros declarations; <br>
          &emsp; * Variable (re)definitions; <br>
          &emsp; * Filtering by Functions, Macros, Variables and Sorting alphabetical; <br>
          &emsp; * Navigation in both directions (Structure View &lt;-> Editor). <br>
     - Quick Documentation for CMake commands, modules, policies, properties, and variables. <br>
     - Syntax and Operation inspections: <br>
          &emsp; * Variable is set but never used; <br>
          &emsp; * Builtin commands should be used in lowercase; <br>
          &emsp; * End-of-block commands (else, endif, etc.) should not take arguments. <br>
      <br>

     <b>Require <a href="https://plugins.jetbrains.com/plugin/10089-cmake-simple-highlighter">CMake simple highlighter</a></b> to be installed! <br>
     <br>

     Plugin became <b>paid</b> for all IntelliJ IDEs (both commercial and community) starting from 2019.3.1 (193.5662) <br>
     <a href="https://plugins.jetbrains.com/plugin/13407-jetbrains-marketplace-licensing-support">JetBrains Marketplace Licensing Support</a> plugin
     should automatically prompt to be installed if CMakePlus is installed from Marketplace. In case of installing CMakePlus from the disk you'll need to install
     JetBrains Marketplace Licensing Support plugin from the disk first. <br>
     <br>

     *Note: Variable's scope of visibility is not implemented yet, i.e. all variables withing Project are shown as global. Variable's rename refactoring (Shift+F6) works fine for variables with single declaration. For multi declared (re-defined, amended) variables rename refactoring works only from variable declaration side (i.e. caret should be on variable declaration, not reference) and will change all visible references and only current declaration. Use with caution. <br>
]]></description>

  <change-notes><![CDATA[
      201.1.1 - Inspections by Daniel Pfeifer suggestions added (see and take part in the <a href="https://github.com/ArtsiomCh/CMake/issues/11">discussion</a> for more details): <br>
       &emsp; - Builtin commands should be used in lowercase. <br>
       &emsp; - Commands else, endif, endforeach, endwhile, endfunction, endmacro should not take arguments. <br>
      201.0.1 - Experimental support of IntelliJ IDEA 2020.1. <br>
      193.3.1 - Operation inspection added: "Variable is set but never used". <br>
       &emsp; - QuickDoc for IF FOREACH WHILE FUNCTION MACRO added. <br>
       &emsp; - QuickDoc updated to Cmake 3.16.2 for commands, modules, policies, properties, variables. <br>
       &emsp; - Find Variable declarations: show part of file path to distinguish different CMakeLists.txt files. <br>
      193.2.1 - fix bug: QuickDoc for VarRefs not shown (2019.3 RC and above). <br>
       &emsp; - fix bug: Plugin did not work properly on CLion under Windows OS. <br>
      193.1.1 - Quick Documentation for CMake commands, modules, policies, properties, and variables: Ctrl+Q and mouse hover (if enabled) <br>
      192.5.1 - user variables definition/reference completion added (no scopes, very little semantic checks yet). <br>
      192.4.1 - Structure View added with: <br>
          &emsp; * Function/Macros declarations; <br>
          &emsp; * Variable (re)definitions; <br>
          &emsp; * Filtering by Functions, Macros, Variables and Sorting alphabetical; <br>
          &emsp; * Navigation in both directions (Structure View <-> Editor). <br>
      192.3.1 - "Comment with Line / Block Comment" (`Ctrl + /` and `Shift + Ctrl + /`) actions added. <br>
          &emsp; Folding regions for: <br>
          &emsp; * Multiline brackets comments; <br>
          &emsp; * Consequent single-line comments;  <br>
          &emsp; * Multiline function's arguments. <br>
      192.2.1 - Folding regions for functions, macros, if/for/while blocks. <br>
          &emsp; * Fix <a href="https://github.com/ArtsiomCh/CMake/issues/5">Exception</a> if space symbol in Path presented. <br>
      192.1.1 - Navigation (Go to definition / Find usages) for variable's (re)definitions/references. <br>
    ]]>
  </change-notes>

  <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html for description -->
<!--  <idea-version since-build="192.0" until-build="194.0"/>-->

  <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html
       on how to target different products -->
  <!-- uncomment to enable plugin in all products
  <depends optional="true" config-file="clion.xml">com.intellij.modules.cidr.lang</depends>
  <depends optional="true" config-file="idea.xml">com.intellij.modules.java</depends>
  <depends>com.intellij.modules.clion</depends>
  <depends>com.intellij.modules.androidstudio</depends>
  <depends>com.intellij.modules.cmake</depends>
  <depends optional="true" config-file="marketplace_required.xml">com.intellij.modules.androidstudio</depends>
  <depends>com.intellij.marketplace</depends>
  -->
  <depends>com.intellij.modules.lang</depends>
  <depends>artsiomch.cmake</depends>

  <extensions defaultExtensionNs="com.intellij">
    <!--
    <lang.parserDefinition language="CMake"
                           factoryArgument="parserDefinition"
                           factoryClass="com.cmakeplugin.CMakePlusExtensionFactory"  />
    <lang.syntaxHighlighterFactory language="CMake"
                                   factoryArgument="syntaxHighlighterFactory"
                                   factoryClass="com.cmakeplugin.CMakePlusExtensionFactory"  />
    <lang.braceMatcher language="CMake"
                       factoryArgument="braceMatcher"
                       factoryClass="com.cmakeplugin.CMakePlusExtensionFactory"  />
     -->

    <psi.referenceContributor implementation="com.cmakeplugin.CMakeReferenceContributor" />
    <lang.findUsagesProvider language="CMake" implementationClass="com.cmakeplugin.CMakeFindUsagesProvider"  />
    <lang.foldingBuilder language="CMake" implementationClass="com.cmakeplugin.CMakeFoldingBuilderForMultiLineBodies"/>
    <lang.foldingBuilder language="CMake" implementationClass="com.cmakeplugin.CMakeFoldingBuilderForSubsequentSingleLineComments"/>
    <lang.commenter language="CMake" implementationClass="com.cmakeplugin.CMakeCommenter" />
    <lang.psiStructureViewFactory language="CMake" implementationClass="com.cmakeplugin.CMakeStructureViewFactory"/>
    <completion.contributor language="CMake" implementationClass="com.cmakeplugin.CMakeVariableCompletionContributor" order="first"/>
    <lang.documentationProvider implementationClass="com.cmakeplugin.CMakeDocProvider" language="CMake" order="first" />

    <lang.refactoringSupport language="CMake"
                             factoryArgument="refactoringSupport"
                             factoryClass="com.cmakeplugin.CMakePlusExtensionFactory"  />

<!--
    <localInspection language="CMake"
                     displayName="CMake: Set command signature mismatch"
                     groupPath="CMake"
                     groupBundle="messages.InspectionsBundle"
                     groupKey="group.names.probable.bugs"
                     enabledByDefault="true"
                     level="ERROR"
                     implementationClass="com.cmakeplugin.inspections.SetSignatureInspection" />
-->

    <localInspection language="CMake"
                     displayName="CMake: Variable is set but never used"
                     groupPath="CMake"
                     groupBundle="messages.InspectionsBundle"
                     groupKey="group.names.probable.bugs"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     implementationClass="com.cmakeplugin.inspections.VariableUnusedInspection" />

    <localInspection language="CMake"
                     displayName="CMake: Builtin commands should be used in lowercase"
                     groupPath="CMake"
                     groupBundle="messages.InspectionsBundle"
                     groupKey="group.names.naming.conventions"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     implementationClass="com.cmakeplugin.inspections.BuiltinCommandLowercaseInspection" />

    <localInspection language="CMake"
                     displayName="CMake: End-of-block commands should not take arguments"
                     groupPath="CMake"
                     groupBundle="messages.InspectionsBundle"
                     groupKey="group.names.naming.conventions"
                     enabledByDefault="true"
                     level="WEAK WARNING"
                     implementationClass="com.cmakeplugin.inspections.EndOfBlockCommandArgumentsInspection" />

  </extensions>

  <application-components>
    <!-- Add your application components here -->
    <component>
      <implementation-class>com.cmakeplugin.CMakePlusComponent</implementation-class>
    </component>
  </application-components>

  <actions>
    <!-- Add your actions here -->
  </actions>

</idea-plugin>